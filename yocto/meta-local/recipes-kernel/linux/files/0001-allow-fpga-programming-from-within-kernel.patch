From 13f0f3462e0ffefe3a484b42fe1edb200bbb34b4 Mon Sep 17 00:00:00 2001
From: Ioannis Galanommatis <galanom@gmail.com>
Date: Sat, 9 Dec 2017 23:55:09 +0200
Subject: [PATCH] allow fpga programming from within kernel

---
 drivers/char/xilinx_devcfg.c       | 144 ++++++++++++++++++++++++-------------
 include/linux/soc/xilinx/xdevcfg.h |  12 ++++
 2 files changed, 106 insertions(+), 50 deletions(-)
 create mode 100644 include/linux/soc/xilinx/xdevcfg.h

diff --git a/drivers/char/xilinx_devcfg.c b/drivers/char/xilinx_devcfg.c
index bc6c13b9e187..cd9ac603af29 100644
--- a/drivers/char/xilinx_devcfg.c
+++ b/drivers/char/xilinx_devcfg.c
@@ -142,7 +142,7 @@ struct xdevcfg_drvdata {
 	bool endian_swap;
 	char residue_buf[3];
 	int residue_len;
-};
+} *drvdata_ptr;
 
 /**
  * struct fclk_data - FPGA clock data
@@ -230,6 +230,67 @@ static irqreturn_t xdevcfg_irq(int irq, void *data)
 }
 
 /**
+ * xdevcfg_do_dma() - Do the DMA transfer of the bitstream to the PCAP
+ * @dma_addr:	DMA handle to the bitstream
+ * @count:	DMA transfer size in bytes
+ * returns:	0 for success
+ */
+static int xdevcfg_do_dma(dma_addr_t dma_addr, size_t count)
+{
+	u32 intr_reg;
+	unsigned long timeout;
+	int status = 0;
+	struct xdevcfg_drvdata *drvdata = drvdata_ptr;
+	
+	/* Enable DMA and error interrupts */
+	xdevcfg_writereg(drvdata->base_address + XDCFG_INT_STS_OFFSET,
+				XDCFG_IXR_ALL_MASK);
+
+
+	xdevcfg_writereg(drvdata->base_address + XDCFG_INT_MASK_OFFSET,
+				(u32) (~(XDCFG_IXR_D_P_DONE_MASK |
+				XDCFG_IXR_ERROR_FLAGS_MASK)));
+
+	drvdata->dma_done = 0;
+	drvdata->error_status = 0;
+
+	/* Initiate DMA write command */
+	if (count < 0x1000)
+		xdevcfg_writereg(drvdata->base_address +
+			XDCFG_DMA_SRC_ADDR_OFFSET, (u32)(dma_addr + 1));
+	else
+		xdevcfg_writereg(drvdata->base_address +
+			XDCFG_DMA_SRC_ADDR_OFFSET, (u32) dma_addr);
+
+	xdevcfg_writereg(drvdata->base_address + XDCFG_DMA_DEST_ADDR_OFFSET,
+				(u32)XDCFG_DMA_INVALID_ADDRESS);
+	
+	xdevcfg_writereg(drvdata->base_address + XDCFG_DMA_SRC_LEN_OFFSET,
+				(count - 1)/4 + 1); // convert bytes to words
+	xdevcfg_writereg(drvdata->base_address + XDCFG_DMA_DEST_LEN_OFFSET, 0);
+
+	timeout = jiffies + msecs_to_jiffies(1000);
+
+	while (!drvdata->dma_done) {
+		if (time_after(jiffies, timeout)) {
+				status = -ETIMEDOUT;
+		}
+	}
+
+	if (!status && drvdata->error_status)
+		status = drvdata->error_status;
+
+	/* Disable the DMA and error interrupts */
+	intr_reg = xdevcfg_readreg(drvdata->base_address +
+					XDCFG_INT_MASK_OFFSET);
+	xdevcfg_writereg(drvdata->base_address + XDCFG_INT_MASK_OFFSET,
+				intr_reg | (XDCFG_IXR_D_P_DONE_MASK |
+				XDCFG_IXR_ERROR_FLAGS_MASK));
+
+	return status;
+}
+
+/**
  * xdevcfg_write() - The is the driver write function.
  *
  * @file:	Pointer to the file structure.
@@ -315,55 +376,7 @@ xdevcfg_write(struct file *file, const char __user *buf, size_t count,
 		}
 	}
 
-	/* Enable DMA and error interrupts */
-	xdevcfg_writereg(drvdata->base_address + XDCFG_INT_STS_OFFSET,
-				XDCFG_IXR_ALL_MASK);
-
-
-	xdevcfg_writereg(drvdata->base_address + XDCFG_INT_MASK_OFFSET,
-				(u32) (~(XDCFG_IXR_D_P_DONE_MASK |
-				XDCFG_IXR_ERROR_FLAGS_MASK)));
-
-	drvdata->dma_done = 0;
-	drvdata->error_status = 0;
-
-	/* Initiate DMA write command */
-	if (count < 0x1000)
-		xdevcfg_writereg(drvdata->base_address +
-			XDCFG_DMA_SRC_ADDR_OFFSET, (u32)(dma_addr + 1));
-	else
-		xdevcfg_writereg(drvdata->base_address +
-			XDCFG_DMA_SRC_ADDR_OFFSET, (u32) dma_addr);
-
-	xdevcfg_writereg(drvdata->base_address + XDCFG_DMA_DEST_ADDR_OFFSET,
-				(u32)XDCFG_DMA_INVALID_ADDRESS);
-	/* Convert number of bytes to number of words.  */
-	if (count % 4)
-		transfer_length	= (count / 4 + 1);
-	else
-		transfer_length	= count / 4;
-	xdevcfg_writereg(drvdata->base_address + XDCFG_DMA_SRC_LEN_OFFSET,
-				transfer_length);
-	xdevcfg_writereg(drvdata->base_address + XDCFG_DMA_DEST_LEN_OFFSET, 0);
-
-	timeout = jiffies + msecs_to_jiffies(1000);
-
-	while (!drvdata->dma_done) {
-		if (time_after(jiffies, timeout)) {
-				status = -ETIMEDOUT;
-				goto error;
-		}
-	}
-
-	if (drvdata->error_status)
-		status = drvdata->error_status;
-
-	/* Disable the DMA and error interrupts */
-	intr_reg = xdevcfg_readreg(drvdata->base_address +
-					XDCFG_INT_MASK_OFFSET);
-	xdevcfg_writereg(drvdata->base_address + XDCFG_INT_MASK_OFFSET,
-				intr_reg | (XDCFG_IXR_D_P_DONE_MASK |
-				XDCFG_IXR_ERROR_FLAGS_MASK));
+	status = xdevcfg_do_dma(dma_addr, count);
 
 	/* If we didn't write correctly, then bail out. */
 	if (status) {
@@ -581,6 +594,35 @@ static int xdevcfg_release(struct inode *inode, struct file *file)
 	return 0;
 }
 
+/**
+ * xdevcfg_program() - FPGA programming from kernel space
+ * @bitstream:	DMA handle to bitstream data
+ * @size:	Bitstream size
+ * @is_partial:	If the bitstream is partial or not
+ * returns:	The status that the DMA will return (zero for success)
+ *
+ */
+int xdevcfg_program(dma_addr_t bitstream, size_t size, bool is_partial)
+{
+	struct inode inode;
+	struct file file;
+	int status;
+	inode.i_cdev = &drvdata_ptr->cdev;
+	file.private_data = drvdata_ptr;
+	drvdata_ptr->is_partial_bitstream = is_partial;
+
+	xdevcfg_open(&inode, &file);
+
+	status = xdevcfg_do_dma(bitstream, size);
+
+	drvdata_ptr->residue_len = 0;
+	xdevcfg_release(&inode, &file);
+	return status;
+
+}
+EXPORT_SYMBOL_GPL(xdevcfg_program);
+
+
 static const struct file_operations xdevcfg_fops = {
 	.owner = THIS_MODULE,
 	.write = xdevcfg_write,
@@ -2036,6 +2078,8 @@ static int xdevcfg_drv_probe(struct platform_device *pdev)
 
 	clk_disable(drvdata->clk);
 
+	drvdata_ptr = drvdata;
+
 	return 0;		/* Success */
 
 failed8:
diff --git a/include/linux/soc/xilinx/xdevcfg.h b/include/linux/soc/xilinx/xdevcfg.h
new file mode 100644
index 000000000000..f82f29680752
--- /dev/null
+++ b/include/linux/soc/xilinx/xdevcfg.h
@@ -0,0 +1,12 @@
+#pragma once
+
+/**
+ * xdevcfg_program() - FPGA programming from kernel space
+ * @bitstream:  DMA handle to bitstream data
+ * @size:       Bitstream size
+ * @is_partial: If the bitstream is partial or not
+ * returns:     The status that the DMA will return (zero for success)
+ *
+ */
+int xdevcfg_program(dma_addr_t bitstream, size_t size, bool is_partial);
+// EOF
-- 
2.13.0

